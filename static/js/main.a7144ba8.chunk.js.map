{"version":3,"sources":["Components/Dasboard/Dashboard.css","Components/Admin/Admin.css","Components/Course/Course.js","Components/Dasboard/Dashboard.js","Components/SelectList/OptionList.js","Components/SelectList/OptionsListTime.js","Components/SelectList/SelectList.js","Components/NewCourse/NewCourse.js","Components/Admin/Admin.js","Components/Login/Login.js","Components/Register/Register.js","App.js","serviceWorker.js","index.js","Components/Login/Login.css","Components/Register/Register.css"],"names":["module","exports","course","props","name","time","Dashboard","state","courses","day","className","classes","WrapDiv","this","map","el","Course","key","to","onClick","logout","type","Button","Component","options","Fragment","value","disabled","selected","optionsTime","i","push","selectList","UpperCase","nameAttr","Select","onChange","handleChange","OptionsListTime","newCourse","NewCourseName","placeholder","Username","Admin","e","setState","POSTdatabase","target","console","log","handleSubmit","alert","document","getElementsByClassName","NewCourse","style","display","Courses","handleUpdate","handleNewCourse","handleAddNewCourse","AdminPanel","onSubmit","Form","SelectList","onChangeHandle","AddNewCourse","margin","Login","username","password","loggedInUser","loggedInAdmin","redirectToRegisterPage","users","idPart","submitForm","preventDefault","admin","filter","user","length","logoutAdmin","logoutUser","LoginForm","Logo","Inputs","Password","Absolute","User","React","Register","email","Invisible","Email","Text","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7144ba8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dashboard\":\"Dashboard__Dashboard___2N2BP\",\"WrapDiv\":\"Dashboard__WrapDiv___2eSTj\",\"Button\":\"Dashboard__Button___Ysfxg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AdminPanel\":\"Admin__AdminPanel___3ogai\",\"Button\":\"Admin__Button___3bqbx\",\"Form\":\"Admin__Form___CpeZr\",\"Select\":\"Admin__Select___2GUxM\",\"Username\":\"Admin__Username___3Bpll\",\"NewCourse\":\"Admin__NewCourse___2syYZ\",\"AddNewCourse\":\"Admin__AddNewCourse___8R5NN\",\"Courses\":\"Admin__Courses___3SarQ\",\"Uppercase\":\"Admin__Uppercase___Y-cZL\"};","import React from 'react';\r\n\r\nconst course = (props) => {\r\n    return(\r\n        <div>\r\n            <p>\r\n                {props.name}:&nbsp;\r\n                <span>\r\n                    {props.time}\r\n                </span>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default course;","import React, { Component } from 'react';\r\n\r\nimport classes from './Dashboard.css';\r\nimport { Link } from 'react-router-dom';\r\nimport Course from '../Course/Course';\r\n\r\nexport class Dashboard extends Component {\r\n  state = {\r\n    //HARDCODED NEED SEND GET REQUEST TO DATABASE\r\n    courses: [\r\n      {\r\n        name:'HTML',\r\n        day:'Ponedeljak',\r\n        time:'15h'\r\n      },\r\n      {\r\n        name:'CSS',\r\n        day:'Sreda',\r\n        time:'13h'\r\n      },\r\n      {\r\n        name:'JS',\r\n        day:'Petak',\r\n        time:'10h'\r\n      }\r\n    ]\r\n  }\r\n\r\n  componentDidMount() {\r\n    // AXIOS GET METHOD WITH DATABASE, SET RESPONSE DATA TO this.state.courses\r\n    // async getDataAxios(){\r\n    //     const response =\r\n    //       await axios.get(\"http://localhost:8083/admin\")\r\n    //     console.log(response.data)\r\n    // }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={classes.Dashboard}>\r\n        <div className={classes.WrapDiv}>\r\n          <h1>Dashboard</h1>\r\n          <h2>My courses</h2>\r\n          {this.state.courses.map((el) =>\r\n            <Course name={el.name} \r\n                    time={el.day + ',' + ' ' + el.time}\r\n                    key={el.name}/>\r\n          )}\r\n          <Link to=\"/\">\r\n            <button onClick={this.props.logout} type=\"submit\" className={classes.Button}>\r\n              Logout\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\n\r\nconst options = () => {\r\n    const days = ['Monday','Tuesday','Wednesday','Thursday','Friday'];\r\n    return (\r\n        <React.Fragment>\r\n             <option value=\"DEFAULT\" disabled selected>Choose day</option>\r\n             {days.map(el=>\r\n                  <option value={el}>{el}</option>\r\n             )}\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default options;","import React from 'react';\r\n\r\nconst optionsTime = () => {\r\n    const time = [];\r\n    for(let i = 8;i<19;i++){\r\n        time.push(i+ 'h');\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n             <option value=\"DEFAULT\" disabled selected>Choose time</option>\r\n             {time.map(el=>\r\n                  <option value={el}>{el}</option>\r\n             )}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default optionsTime;","import React from 'react'\r\n\r\nimport OptionsList from './OptionList';\r\nimport OptionsListTime from './OptionsListTime';\r\n\r\nconst selectList = (props) => {\r\n    return(\r\n        <div>\r\n            <label className={props.classes.UpperCase}>\r\n                <strong>\r\n                    {props.name}\r\n                </strong> \r\n            </label>\r\n            <p>\r\n                <select name={props.nameAttr + 'day'}  \r\n                        className={props.classes.Select} \r\n                        onChange={props.handleChange}>\r\n                    <OptionsList />\r\n                </select>\r\n                &nbsp;\r\n                <select name={props.nameAttr + 'time'} \r\n                        className={props.classes.Select} \r\n                        onChange={props.handleChange}>\r\n                    <OptionsListTime />\r\n                </select>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default selectList;","import React from 'react'\r\n\r\nconst newCourse = (props) => {\r\n    return (\r\n        <div>\r\n            <label>\r\n                Course name\r\n            </label><br />\r\n                <input  name=\"NewCourseName\" \r\n                        value={props.state.NewCourseName} \r\n                        onChange={props.onChange} \r\n                        type=\"text\" \r\n                        placeholder=\"Enter course name\" \r\n                        className={props.classes.Username}\r\n                />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default newCourse;","import React, { Component } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport classes from './Admin.css';\r\nimport SelectList from './../../Components/SelectList/SelectList'\r\nimport NewCourse from './../../Components/NewCourse/NewCourse'\r\n\r\nclass Admin extends Component {\r\n    state = {\r\n        courses: [{name:'HTML'},{name:'CSS'},{name:'JS'}]\r\n    }\r\n    \r\n    // async getDataAxios(){\r\n    //     const response =\r\n    //       await axios.get(\"http://localhost:8083/admin\")\r\n    //     console.log(response.data)\r\n    // }\r\n\r\n    componentDidMount() {\r\n        // AXIOS GET METHOD, AND SET RESPONSE DATA TO state.courses\r\n        // this.getDataAxios();\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            POSTdatabase:{...this.state.POSTdatabase,[e.target.name]:e.target.value\r\n        }});\r\n        console.log(this.state);\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        // SEND WITH POST METHOD TO DATABASE this.state.POSTdatabase\r\n        // const payload = this.state;\r\n        // data.append(\"myjsonkey\", JSON.stringify(payload));\r\n\r\n        // axios('http://localhost:8083/admin',{\r\n        // method: 'POST',\r\n        // body: data,\r\n        // headers: {\r\n        //     'Authorization': `bearer ${token}`,\r\n        //     'Content-Type': 'application/json'\r\n        // }\r\n        // })\r\n        // .then(function(response) {\r\n        //     return response.json()\r\n        //     }).then(function(body) {\r\n        //     console.log(body);\r\n        //     });\r\n        console.log('Submited')\r\n        alert(\"New course created\")\r\n        this.setState({courses:[...this.state.courses,{name:this.state.POSTdatabase.NewCourseName}]})\r\n        document.getElementsByClassName(classes.NewCourse)[0].style.display = \"none\";\r\n        document.getElementsByClassName(classes.Courses)[0].style.display = \"block\";\r\n    }\r\n\r\n    handleUpdate = () => {\r\n        console.log('Submited')\r\n        alert('Updated')\r\n        // POST METHOD TO DATABASE this.state.POSTdatabase\r\n    }\r\n\r\n    handleNewCourse = (e) => {\r\n        this.setState({\r\n            POSTdatabase:{...this.state.POSTdatabase,NewCourseName:e.target.value}\r\n        })\r\n    }\r\n\r\n    handleAddNewCourse = () => {\r\n        document.getElementsByClassName(classes.NewCourse)[0].style.display = \"block\";\r\n        document.getElementsByClassName(classes.Courses)[0].style.display = \"none\";\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className={classes.AdminPanel}>\r\n                <div>\r\n                    <form onSubmit={this.handleSubmit} className={classes.Form}>\r\n                    <h1>\r\n                        Admin panel\r\n                    </h1>\r\n                        <div className={classes.Courses}>\r\n                            {this.state.courses.map((el) => \r\n                                <SelectList name={el.name}\r\n                                            key={el.name}\r\n                                            nameAttr={el.name}\r\n                                            handleChange={this.handleChange}\r\n                                            state={this.state}\r\n                                            classes={classes} \r\n                                />\r\n                            )}\r\n                            <input  type=\"button\"\r\n                                    onClick={this.handleUpdate}\r\n                                    value=\"Update\" \r\n                                    className={classes.Button}\r\n                            />\r\n                        </div>\r\n                        <div className={classes.NewCourse}>\r\n                            <NewCourse state={this.state} \r\n                                       onChange={this.handleNewCourse}\r\n                                       classes={classes}\r\n                                       onChangeHandle={this.handleChange}\r\n                            />\r\n                            <input type=\"button\" \r\n                                   value=\"Create\" \r\n                                   onClick={this.handleSubmit} \r\n                                   className={classes.Button}\r\n                            />                        \r\n                        </div>\r\n                        <input type=\"button\"\r\n                               value=\"+ Add new course\" \r\n                               onClick={this.handleAddNewCourse} \r\n                               className={classes.AddNewCourse}\r\n                        />\r\n                        <hr style={{margin:'5% 0'}} />\r\n                        <p>This is Admin page. Only auth people can see this.</p>\r\n                        <Link to=\"/\">\r\n                            <button  type=\"submit\" className={classes.Button}>\r\n                                Logout\r\n                            </button>\r\n                        </Link> \r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Admin;","import React from 'react'\r\n\r\nimport classes from './Login.css'\r\nimport { Redirect } from 'react-router-dom';\r\nimport Dashboard from '../Dasboard/Dashboard';\r\nimport Admin from '../Admin/Admin';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Login extends React.Component {\r\n    state = {\r\n        username: '',\r\n        password: '',\r\n        loggedInUser:false,\r\n        loggedInAdmin:false,\r\n        redirectToRegisterPage:false,\r\n        users:[\r\n            {\r\n                username:\"admin\",\r\n                password:\"admin\",\r\n                idPart:1\r\n            },\r\n            {\r\n                username:\"user\",\r\n                password:\"user\",\r\n                idPart:2\r\n            }\r\n        ]\r\n    }\r\n\r\n    componentDidMount() {\r\n        // AXIOS GET METHOD AND SET STATE.USERS WITH RESPONSE DATA\r\n        // async getDataAxios(){\r\n    //     const response =\r\n    //       await axios.get(\"http://localhost:8083/admin\")\r\n    //     console.log(response.data)\r\n    // }\r\n    }\r\n    \r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    submitForm = (e) => {\r\n        e.preventDefault()\r\n        const { username, password } = this.state;\r\n        const admin=this.state.users.filter(user =>  username===user.username && \r\n                                                     password===user.password && \r\n                                                     user.idPart===1);\r\n        const user=this.state.users.filter(user =>  username===user.username && \r\n                                                    password===user.password && \r\n                                                    user.idPart===2);\r\n        if(admin.length===1) {\r\n            this.setState({\r\n                loggedInAdmin:true\r\n            })\r\n        }\r\n        if(user.length===1) {\r\n            this.setState({\r\n                loggedInUser:true\r\n            })\r\n        }\r\n    }\r\n    \r\n    logoutAdmin = () => {\r\n        this.setState({\r\n            loggedInAdmin:false\r\n        }) \r\n    }\r\n\r\n    logoutUser = () => {\r\n        this.setState({\r\n            loggedInUser:false\r\n        }) \r\n    }\r\n\r\n    render() {\r\n\r\n        if(this.state.loggedInAdmin) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Redirect to=\"/admin\" />\r\n                    <Admin logout={this.logoutAdmin} />\r\n                </React.Fragment>\r\n            )\r\n        }\r\n\r\n        if(this.state.loggedInUser) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Redirect to=\"/dashboard\"/>\r\n                    <Dashboard logout={this.logoutUser} />\r\n                </React.Fragment>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Login}>\r\n                <form onSubmit={this.submitForm} className={classes.LoginForm}>\r\n                    <div className={classes.Logo}></div>\r\n                    <h1>Login</h1>\r\n                        <div className={classes.Inputs}>\r\n                            <label>\r\n                                Username\r\n                            </label>\r\n                                <input  name=\"username\" \r\n                                        value={this.state.username} \r\n                                        onChange={this.onChange} \r\n                                        type=\"text\" \r\n                                        placeholder=\"Enter username\" \r\n                                        className={classes.Username}\r\n                                /> \r\n                            <label>\r\n                                Password\r\n                            </label>\r\n                                <input  name=\"password\" \r\n                                        value={this.state.password} \r\n                                        onChange={this.onChange}  \r\n                                        type=\"password\" \r\n                                        placeholder=\"Ennter password\" \r\n                                        className={classes.Password}\r\n                                /> \r\n                        </div>\r\n                    <button type=\"submit\" className={classes.Button}>\r\n                        Login\r\n                    </button>\r\n                    <hr />\r\n                    <p>Not registered yet. Register now</p>\r\n                    <Link to=\"/register\">\r\n                        <button className={classes.Button}>\r\n                            Register\r\n                        </button>\r\n                    </Link>\r\n                    <div className={classes.Absolute}>\r\n                        <div className={classes.User}>\r\n                            <p>Username: user</p>\r\n                            <p>Password: user</p>\r\n                        </div>\r\n                        <div className={classes.User}>\r\n                            <p>Username: admin</p>\r\n                            <p>Password: admin</p>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React from 'react'\r\n\r\nimport classes from './Register.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Register extends React.Component {\r\n    state = {\r\n        username: '',\r\n        password: '',\r\n        email:''\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n        console.log(this.state)\r\n    }\r\n\r\n    submitForm = (e) => {\r\n        e.preventDefault()\r\n        const data = this.state;\r\n        console.log('Submited')\r\n        document.getElementsByClassName(classes.Invisible)[0].style.display = \"block\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Login}>\r\n                <form onSubmit={this.submitForm} className={classes.LoginForm}>\r\n                    <h1>Register</h1>\r\n                        <div className={classes.Inputs}>\r\n                            <label>\r\n                                Username\r\n                            </label>\r\n                                <input  name=\"username\" \r\n                                        value={this.state.username} \r\n                                        onChange={this.onChange} \r\n                                        type=\"text\" \r\n                                        placeholder=\"Unesite username\" \r\n                                        className={classes.Username}\r\n                            />  \r\n                            <label>\r\n                                Password\r\n                            </label>\r\n                                <input  name=\"password\" \r\n                                        value={this.state.password} \r\n                                        onChange={this.onChange}  \r\n                                        type=\"password\" \r\n                                        placeholder=\"Unesite password\" \r\n                                        className={classes.Password}\r\n                                />\r\n                            <label>\r\n                                Email address\r\n                            </label>\r\n                                <input  name=\"email\" \r\n                                        value={this.state.email} \r\n                                        onChange={this.onChange} \r\n                                        type=\"email\" \r\n                                        placeholder=\"Unesite email\" \r\n                                        className={classes.Email}\r\n                                />\r\n                        </div>\r\n                    <button type=\"submit\" className={classes.Button}>\r\n                        Register\r\n                    </button>\r\n                    <p className={classes.Invisible}>Registered, Go to Login</p>\r\n                    <hr />\r\n                    <p className={classes.Text}>Already regstered. Go to Login</p>\r\n                    <Link to=\"/\">\r\n                        <button className={classes.Button}>\r\n                            Login\r\n                        </button>\r\n                    </Link>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register;","import React from 'react';\n\nimport  './App.css';\nimport { Switch, Route } from \"react-router-dom\";\nimport Login from './Components/Login/Login';\nimport Register from './Components/Register/Register';\nimport Dashboard from './Components/Dasboard/Dashboard';\nimport Admin from './Components/Admin/Admin';\n\nconst App = () => {\n  return (\n    <Switch>\n        <Route exact path=\"/\" component={Login} />\n        <Route exact path=\"/register\" component={Register} />\n        <Route path=\"/admin\" component={Admin} />\n        <Route path=\"/dashboard\" component={Dashboard} />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n<BrowserRouter>\n    <App />\n</BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"Login__Login___2WQlh\",\"LoginForm\":\"Login__LoginForm___3WPTt\",\"Logo\":\"Login__Logo___2qTqC\",\"Inputs\":\"Login__Inputs___2eu_5\",\"Button\":\"Login__Button___2WXGU\",\"Username\":\"Login__Username___2Tg-w\",\"Password\":\"Login__Password___1vt7n\",\"Absolute\":\"Login__Absolute___3Lq-d\",\"User\":\"Login__User___33aHn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"Register__Login___2BxzK\",\"LoginForm\":\"Register__LoginForm___3GsVR\",\"Invisible\":\"Register__Invisible___1hU3b\",\"Logo\":\"Register__Logo___3KhHQ\",\"Inputs\":\"Register__Inputs___2b0VG\",\"Button\":\"Register__Button___2qLy9\",\"Username\":\"Register__Username___1uNIR\",\"Password\":\"Register__Password___2qig-\",\"Email\":\"Register__Email___2xiR8\"};"],"sourceRoot":""}